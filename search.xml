<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[UML统一建模语言]]></title>
    <url>%2Fhexo%2F2019%2F04%2F20%2FUML%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80%2F</url>
    <content type="text"><![CDATA[前言 不属于某种编程语言，而是真的适用于任何软件系统进行建模 以图形的方式 学习目的：能看懂各种图 内容来自韩顺平老师 uml教学视频 软件开发生命周期 软件开发步骤 需求分析（分析师）【30%】分析出软件需要完成什么功能 软件设计（架构师，项目经理）【20%】技术栈操作系统数据库设计表 …用例图 类图 时序图选人 编程阶段（编码阶段）【20%】把设计转化为代码 测试阶段（测试工程师）【20%】 实施和维护阶段【10%】把项目，需要安装和配置设置好，让客户使用，并解决简单问题 软件开发模型（原型开发、递增迭代开发） 瀑布模型（假定需求不变） 增量模型 原型开发模型 建模 工具 uml图 用例图分析系统有哪些角色（一类人，另外一个系统），各个角色使用功能 一个用例详细描述，应该有哪些？ 前置条件 基本事件流 其他事件流 异常事件流 后置条件 类图原则上，一个用例图对应一个类图，一个类图可以包含多个类 六大关系 (java语言描述) 依赖泛化实现（接口）关联组合聚合（类中联系更紧密，生命周期一致） 活动图（本质：流程图）描述一个事件发生的过程 时序图用户进行某个操作时，按照时间顺序看，各个模块之间如何调用 协作图协作图和时序图可以互转，不在画出事例 组件图 部署图]]></content>
      <tags>
        <tag>uml</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx学习]]></title>
    <url>%2Fhexo%2F2019%2F04%2F20%2FNginx%2F</url>
    <content type="text"><![CDATA[1.初始Nginx使用场景 静态资源服务12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879log_format main &apos;$remote_Addr&apos;; # 配置log日志样式 server &#123; listen 8080; server_name localhost; access_log logs/test.log main; # 采用main的日志样式 /* * root 会将url路径附带在目标寻找地址 * alias 不带上url匹配路径 */ location / &#123; autoindex on; set $limit_rate 1k; # 限制nginx向用户提供的访问速度，每秒传输1kB/s &#125;&#125;upstream local &#123; server 127.0.0.1:8081;&#125;server &#123; listen 80; # 本地才允许访问 server_name localhost; access_log: logs/test.log main; # 采用main的日志样式 /* * root 会将url路径附带在目标寻找地址 * alias 不带上url匹配路径 */ location / &#123; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded_For $proxy_add_x_forwarded_for; proxy_pass http://local; &#125;&#125;server &#123; listen 127.0.0.1:8081; # 本地才允许访问 server_name: localhost; access_log: logs/test.log main; # 采用main的日志样式 /* * root 会将url路径附带在目标寻找地址 * alias 不带上url匹配路径 */ location / &#123; autoindex on; set $limit_rate 1k; # 限制nginx向用户提供的访问速度，每秒传输1kB/s &#125;&#125;# gzip 压缩gzip on;gzip_min_length 1; # 小于1的文件不压缩gzip_comp_level: 2; # 压缩等级gzip_types text/plain; # 需要压缩的文件类型// 缓存服务器http &#123; proxy_cache_path /tmp/nginxcache levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m use_temp_path=off; server &#123; server_name localhost; listen 80; location / &#123; proxy_cache my_cache; procy_cache_key $host$url$is_args$args; proxy_cache_valid 200 304 302 1d; &#125; &#125;&#125; 反向代理服务API服务优点 高并发，高性能 可扩展性好 高可靠性 热部署 BSD许可证 组成 二进制可执行文件 Nginx.conf 配置文件 控制Nginx的行为 access.log 记录每一条http请求、响应信息 error.log 定位问题 1OpenResty 了解一下 配置文件 http指令快 12upstream: 表示上游服务 server: 域名表达式 nginx命令行123456789101112nginx -s reload -? 帮助 -c 指定配置的文件 -g 指定配置指令 -p 指定运行目录 -s 发送信号 &gt; stop 立即停止服务 &gt; quit 优雅的停止服务 &gt; reload 重载配置文件 &gt; reopen 重新开始记录日志文件（新建日志文件） -t 测试配置文件是否有语法错误 热部署 Kill -USR2 13195(nginx PId) （热部署命令）kill -WINCH 13195 (优雅的退出)执行完毕后，旧的nginx不会自动退出，但不在监听端口，需要执行退出指令 日志切割 https1certbot tls 安全密码套件借读 证书类型 DV证书（域名证书） OV证书（组织证书） EV证书（扩展证书） 2.Nginx架构基础3.详解HTTP模块4.反向代理与负载均衡5.Nginx的系统层性能优化6.从源码视角深入使用Nginx与OpenResty]]></content>
      <categories>
        <category>nginx学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Golang并发编程]]></title>
    <url>%2Fhexo%2F2019%2F04%2F20%2FGolang%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[日志监控系统常见并发模型 进程&amp;线程（apache） 异步非阻塞（Nginx， Libevent， NodeJs） 协程（Golang， Erlang， lua） Goroutinesinfluxdb一个开源的时序性的数据库，使用Go语言编写，被广泛用于存储系统的监控数据，IOT行业实时数据场景。有如下特性： 部署简单，无外部依赖 内置http支持，使用http读写 类sql的灵活查询（max， min， sum等） docker安装influxdb 监控图：grafana]]></content>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
</search>
